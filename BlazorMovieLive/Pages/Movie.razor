@page "/movie/{id:int}"
@inject TMDBCLient TMDB
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (!string.IsNullOrEmpty(updateMessage))
{
    <div class="notification-bar">
        @if(updateSuccess){}
        <div class="@GetAlertClass()">
            @updateMessage
        </div>
    </div>
}

<div style="margin-top: @navbarHeight}px;">
    <style>
        .notification-bar {
            position: fixed;            
            left: 0;
            width: 100%;
            z-index: 1000;
        }
    </style>
</div>

@if (movieDetails is null)
{
    <p><em>Loading the movie...</em></p>
}
else
{

    <PageTitle>@movieDetails.Title</PageTitle>
    <!--Page Banner-->
    <div class="hero-bg" style="@($"--bg-img: url(https://image.tmdb.org/t/p/original/{movieDetails.BackdropPath})")">
        <div class="hero-container">
            <div class="container-xxl d-flex flex-column flex-md-row">
                <!--title content goes here-->
                <div class="flex-grow-1 d-flex align-items-center justify-content-center justify-content-md-end">
                    <div class="title-container text-center text-md-end">
                        <h1 class="text-light">@movieDetails.Title</h1>
                        <h2 class="text-light">@movieDetails.Tagline</h2>
                        @if (DateTime.TryParse(movieDetails.ReleaseDate, out DateTime releaseDate))
                        {
                            <span class="badge me-2 text-bg-light">@releaseDate.ToString("dd MMMM, yyyy")</span>
                        }
                        @{
                            var runtime = $"{movieDetails.Runtime / 60}h {movieDetails.Runtime % 60}m";
                            var rating = (movieDetails.VoteAverage * 10).ToString("F1");
                        }
                        <span class="badge me-2 text-bg-dark">@runtime</span>
                        <span class="badge me-2 text-bg-success">@rating% <i class="bi bi-stars"></i></span>
                        <div class="movie-links">
                            <div class="d-flex justify-content-center justify-content-md-end p-3">

                                @if (!favoriteMoviesListIds.Any(id => id == movieDetails.Id))
                                {
                                    <div class="text-center px-2">
                                        <button class="btn btn-outline-success rounded-pill" @onclick="AddToFavorites">
                                            Add to favorites
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center px-2">
                                        <button class="btn btn-outline-danger rounded-pill" @onclick="RemoveFromFavorites">
                                            Remove favorite
                                        </button>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(movieDetails.Homepage))
                                {
                                    <div class="text-center px-2">
                                        <a href="@movieDetails.Homepage" target="_blank" class="btn btn-outline-light rounded-pill" style="font-weight: bold;">
                                            Website
                                        </a>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(movieDetails.ImdbId))
                                {
                                    <div class="text-center px-2">
                                        <a href="@($"https://www.imdb.com/title/{movieDetails.ImdbId}")" target="_blank" class="btn btn-outline-warning rounded-pill" style="font-weight: bold;">
                                            IMDB
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>

                    </div>
                </div>
                <div class="order-last order-md-first d-flex justify-content-center">
                    <div class="poster-container">
                        @if (string.IsNullOrEmpty(movieDetails.PosterPath))
                        {
                            <img src="/images/PosterPlaceHolder.png" alt="Movie Poster" />
                        }
                        else
                        {
                            <img src="@($"https://image.tmdb.org/t/p/w500/{movieDetails.PosterPath}")" alt="Movie Poster" />
                        }
                    </div>
                </div>
            </div>            
        </div>
    </div>
    <div class="container-xxl">
        <div class="overview d-flex flex-column">
            <p>@movieDetails.Overview</p>

            @if (movieDetails.SpokenLanguages.Any())
            {
                <div>
                    Languages: @string.Join(", ", movieDetails.SpokenLanguages.Select(sl => sl.EnglishName))
                </div>
            }
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private MovieDetails? movieDetails;

    private List<int> favoriteMoviesListIds;    

    private string updateMessage = "";

    private bool updateSuccess = false;

    private int navbarHeight;

    private bool isOperationInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        favoriteMoviesListIds = await AuthService.GetFavoriteMovieIdsAsync();
        movieDetails = await TMDB.GetMovieDetailsAsync(Id);
        navbarHeight = await JSRuntime.InvokeAsync<int>("getNavbarHeight");        
    }
    
    private string GetAlertClass()
    {
        return updateSuccess ? "alert alert-success" : "alert alert-danger";
    }

    private async Task AddToFavorites()
    {
        if (isOperationInProgress || movieDetails == null)
            return;

        isOperationInProgress = true;

        var favoriteMovieDto = new FavoriteMovieDto
            {
                MovieId = movieDetails.Id,
                MovieTitle = movieDetails.Title
            };

        var success = await AuthService.AddToFavorites(favoriteMovieDto);
        favoriteMoviesListIds.Add(movieDetails.Id);
        updateSuccess = success;
        updateMessage = success
            ? $"{movieDetails.OriginalTitle} has been added to your favorites!"
            : "Failed to add movie to favorites";

        StateHasChanged();
        await Task.Delay(3000);
        updateMessage = "";
        StateHasChanged();

        isOperationInProgress = false;
    }
    private async Task RemoveFromFavorites()
    {
        if (isOperationInProgress || movieDetails == null)
            return;

        isOperationInProgress = true;

        var success = await AuthService.RemoveFromFavorites(movieDetails.Id);
        favoriteMoviesListIds.Remove(movieDetails.Id);
        updateSuccess = !success;
        updateMessage = success
            ? $"{movieDetails.OriginalTitle} has been removed from your favorites!"
            : "Failed to remove movie from favorites";

        StateHasChanged();
        await Task.Delay(3000);
        updateMessage = "";
        StateHasChanged();

        isOperationInProgress = false;
    }
}
